--- NT4\private\mvdm\dpmi\makefile.sub
+++ nt\private\mvdm\dpmi\makefile.sub
5c5,6
< PLATFORM=$(TARGET_DIRECTORY)
---
> #PLATFORM=$(TARGET_DIRECTORY)
> PLATFORM=PPC
27,32c28,33
< !IF $(X86)
< EXTRA_OPTIONS = -Di386 -DMD
< OPTIONS = -DDEBUG=0 $(DBGOPTS) -DWOW -DWOW_x86 $(EXTRA_OPTIONS) -D?QUIET
< !ELSE
< OPTIONS = -DDEBUG=0 $(DBGOPTS) -DWOW -DWOW_$(PLATFORM) $(EXTRA_OPTIONS) -D?QUIET
< !ENDIF
---
> #!IF $(X86)
> #EXTRA_OPTIONS = -Di386 -DMD
> #OPTIONS = -DDEBUG=0 $(DBGOPTS) -DWOW -DWOW_x86 $(EXTRA_OPTIONS) -D?QUIET
> #!ELSE
> OPTIONS = -DDEBUG=0 $(DBGOPTS) -DWOW -DWOW_$(PLATFORM) -DFLATAPIXLAT $(EXTRA_OPTIONS) -D?QUIET -DWHEN_COMMAND_COM_WORKS
> #!ENDIF
43c44
<         $(DEST)\dxend.obj \
---
>         $(DEST)\dxmmgr.obj   $(DEST)\dxend.obj \
45c46
<         $(DEST)\dxnetbio.obj    $(DEST)\dxdisk.obj  \
---
>         $(DEST)\dxnetbio.obj    $(DEST)\dxint31.obj   $(DEST)\dxdisk.obj  \
48,50c49,51
< !IF $(X86)
<         $(DEST)\ntnpxem.obj     \
< !ENDIF
---
> #!IF $(X86)
> #        $(DEST)\ntnpxem.obj     \
> #!ENDIF
65a67
>     @echo $(DEST)\dxint31.obj +    >>$(DEST)\tmp.lnk
67a70
>     @echo $(DEST)\dxmmgr.obj  +    >>$(DEST)\tmp.lnk
70,72c73,75
< !IF $(X86)
<     @echo $(DEST)\ntnpxem.obj  +    >>$(DEST)\tmp.lnk
< !ENDIF
---
> #!IF $(X86)
> #    @echo $(DEST)\ntnpxem.obj  +    >>$(DEST)\tmp.lnk
> #!ENDIF
96c99
< $(DEST)\dxboot.obj dxboot.lst: dxboot.asm ./cmacros.inc \
---
> $(DEST)\dxboot.obj dxboot.lst: 486\dxboot.asm ./cmacros.inc \
99c102
<         $(ASM) dxboot,$(DEST)\;
---
>         $(ASM) 486\dxboot,$(DEST)\;
130c133
< $(DEST)\dxfunc.obj dxfunc.lst: dxfunc.asm ../wow16/inc/dosx.inc ./cmacros.inc \
---
> $(DEST)\dxfunc.obj dxfunc.lst: 486\dxfunc.asm ../wow16/inc/dosx.inc ./cmacros.inc \
133c136
<         $(ASM) dxfunc,$(DEST)\;
---
>         $(ASM) 486\dxfunc,$(DEST)\;
139c142
< $(DEST)\dxintr.obj dxintr.lst: dxintr.asm ./cmacros.inc \
---
> $(DEST)\dxintr.obj dxintr.lst: 486\dxintr.asm ./cmacros.inc \
142c145
<         $(ASM) dxintr,$(DEST)\;
---
>         $(ASM) 486\dxintr,$(DEST)\;
143a147,150
> $(DEST)\dxint31.obj dxint31.lst: 486\dxint31.asm ../wow16/inc/int31.inc ./cmacros.inc \
>         dxrom.inc gendefs.inc interupt.inc pmdefs.inc segdefs.inc intmac.inc \
>         stackchk.inc
>         $(ASM) 486\dxint31,$(DEST)\;
144c152
< $(DEST)\dxmain.obj dxmain.lst: dxmain.asm ./cmacros.inc gendefs.inc \
---
> $(DEST)\dxmain.obj dxmain.lst: 486\dxmain.asm ./cmacros.inc gendefs.inc \
146c154
<         $(ASM) dxmain,$(DEST)\;
---
>         $(ASM) 486\dxmain,$(DEST)\;
146a156,158
> $(DEST)\dxmmgr.obj dxmmgr.lst: dxmmgr.asm ./cmacros.inc dxvcpi.inc gendefs.inc \
>         pmdefs.inc segdefs.inc woaswapi.inc
>         $(ASM) dxmmgr,$(DEST)\;
160c172
< $(DEST)\dxstrt.obj dxstrt.lst: dxstrt.asm ./cmacros.inc \
---
> $(DEST)\dxstrt.obj dxstrt.lst: 486\dxstrt.asm ./cmacros.inc \
162c174
<         $(ASM) dxstrt,$(DEST)\;
---
>         $(ASM) 486\dxstrt,$(DEST)\;
164c176
< $(DEST)\dxutil.obj dxutil.lst: dxutil.asm ../inc/bop.inc ../inc/dpmi.inc \
---
> $(DEST)\dxutil.obj dxutil.lst: 486\dxutil.asm ../inc/bop.inc ../inc/dpmi.inc \
166c178
<         $(ASM) dxutil,$(DEST)\;
---
>         $(ASM) 486\dxutil,$(DEST)\;
--- NT4\private\mvdm\dpmi32\dpmimscr.c
+++ nt\private\mvdm\dpmi32\dpmimscr.c
83c83
<     EnableEmulatorIretHooks();
---
>     //EnableEmulatorIretHooks();
108c108
<     DisableEmulatorIretHooks();
---
>     //DisableEmulatorIretHooks();
--- NT4\private\mvdm\dpmi32\dpmiint.c
+++ nt\private\mvdm\dpmi32\dpmiint.c
84c84
<     DBGTRACE(DPMI_SET_PMODE_INT_HANDLER, IntNumber,
---
>     DBGTRACE((USHORT)(VDMTR_TYPE_DPMI_SI | IntNumber),
147c147
<     DBGTRACE(DPMI_SET_FAULT_HANDLER, IntNumber,
---
>     DBGTRACE((USHORT)(VDMTR_TYPE_DPMI_SF | IntNumber), 
417a418
>         DBGTRACE(VDMTR_TYPE_DPMI | DPMI_SWITCH_STACKS, (USHORT)LockedPMStackSel, LockedPMStackOffset); 
446a448
>         DBGTRACE(VDMTR_TYPE_DPMI | DPMI_SWITCH_STACKS, (USHORT)PMLockOrigSS, PMLockOrigESP); 
520c522
<     DBGTRACE(DPMI_SW_INT, IntNumber, 0, 0);
---
>     DBGTRACE(VDMTR_TYPE_DPMI | DPMI_SW_INT, (USHORT)IntNumber, 0);
524c526,535
<     }
---
>     }
>     
>     //
>     // If we're here via breakpoint, see if it belongs to NTVDM debug code.
>     //
>     if ((IntNumber == 3) &&
>         (*(ULONG *)(IntelBase+FIXED_NTVDMSTATE_LINEAR) & VDM_BREAK_DEBUGGER) &&
>         DbgBPInt()) {
>         return TRUE;
>     } 
575c586
<     DBGTRACE(DPMI_DISPATCH_INT, IntNumber, 0, 0);
---
>     DBGTRACE(VDMTR_TYPE_DPMI | DPMI_DISPATCH_INT, (USHORT)IntNumber, 0); 
606c617
<     DBGTRACE(DPMI_HW_INT, IntNumber, 0, 0);
---
>     DBGTRACE(VDMTR_TYPE_DPMI | DPMI_HW_INT, (USHORT)IntNumber, 0); 
649c660
<     DBGTRACE(DPMI_DISPATCH_INT, IntNumber, 0, 0);
---
>     DBGTRACE(VDMTR_TYPE_DPMI | DPMI_DISPATCH_INT, (USHORT)IntNumber, 0); 
763c774
<     DBGTRACE(DPMI_INT_IRET16, 0, 0, 0);
---
>     DBGTRACE(VDMTR_TYPE_DPMI | DPMI_INT_IRET16, 0, 0); 
856c867
<     DBGTRACE(DPMI_INT_IRET32, 0, 0, 0);
---
>     DBGTRACE(VDMTR_TYPE_DPMI | DPMI_INT_IRET32, 0, 0); 
913c924,937
<     DBGTRACE(DPMI_FAULT, IntNumber, ErrorCode, 0);
---
>     DBGTRACE(VDMTR_TYPE_DPMI | DPMI_FAULT, (USHORT)IntNumber, ErrorCode); 
>     
>     if ((IntNumber == 1)  &&
>         (*(ULONG *)(IntelBase+FIXED_NTVDMSTATE_LINEAR) & VDM_BREAK_DEBUGGER) &&
>         DbgTraceInt()) {
>         return TRUE;
>     }
> 
>     if (DbgFault(IntNumber)) {      // try the debugger
>         //
>         // exception handled via user input
>         //
>         return TRUE;
>     }
995c1019
<     DBGTRACE(DPMI_DISPATCH_FAULT, IntNumber, 0, 0);
---
>     DBGTRACE(VDMTR_TYPE_DPMI | DPMI_DISPATCH_FAULT, (USHORT)IntNumber, 0); 
1036c1060
<     DBGTRACE(DPMI_FAULT_IRET, 0, 0, 0);
---
>     DBGTRACE(VDMTR_TYPE_DPMI | DPMI_FAULT_IRET, 0, 0); 
1075c1099
<     DBGTRACE(DPMI_FAULT_IRET, 0, 0, 0);
---
>     DBGTRACE(VDMTR_TYPE_DPMI | DPMI_FAULT_IRET, 0, 0); 
1330c1354
<     DBGTRACE(DPMI_OP_EMULATION, Opcode, (ULONG) bReturn, 0);
---
>     DBGTRACE(VDMTR_TYPE_DPMI | DPMI_OP_EMULATION, Opcode, (ULONG) bReturn); 
--- NT4\private\mvdm\softpc.new\obj.vdm\ntvdm.src
+++ nt\private\mvdm\softpc.new\obj.vdm\ntvdm.src
261c261
< #ifdef  _X86_
---
> #ifdef  _X86dpmi_
--- NT4\private\mvdm\dpmi32\sources.inc
+++ nt\private\mvdm\dpmi32\sources.inc
36d35
<         ..\dosmem.c    \
44,45d42
<         ..\int2f.c     \
<         ..\int31.c     \
53c50,51
< X86_SOURCES=..\i386\dpmi386.c ..\i386\dpmimem.c
---
> #X86_SOURCES=..\i386\dpmi386.c ..\i386\dpmimem.c
> X86_SOURCES=dpmimemr.c
59c57
< C_DEFINES=-DLINKED_INTO_MONITOR
---
> #C_DEFINES=-DLINKED_INTO_MONITOR
--- NT4\private\mvdm\vdmexts\dpmi.c
+++ nt\private\mvdm\vdmexts\dpmi.c
176a177
> #ifdef  _X86dpmi_
224c225
< 
---
> #endif
232a234
> #ifdef  _X86dpmi_
275c277
< 
---
> #endif
--- NT4\private\mvdm\vdmexts\trace.c
+++ nt\private\mvdm\vdmexts\trace.c
97,99c97,99
<                                  "InitDosxRM",
<                                  "InitDosx",
<                                  "InitLDT",
---
>                                  "SetDescriptorTableEntries",
>                                  "DPMISwitchToProtectedMode",
>                                  "SetProtectedmodeInterrupt",
101,102c101
<                                  "InitIDT",
<                                  "InitExceptionHandlers",
---
>                                  "InitDosx",
103a103,112
>                                  "XlatInt21Call",
>                                  "AllocXmem",
>                                  "FreeXmem",
>                                  "ReallocXmem",
>                                  "SetFaultHandler",
>                                  "GetMemoryInformation",
>                                  "DpmiInUse",
>                                  "DpmiNoLongerInUse",
>                                  "SetDebugRegisters",
>                                  "PassTableAddress",
105,118c114
<                                  "InUse",
<                                  "NoLongerInUse",
<                                  "switch_to_protected_mode",
<                                  "switch_to_real_mode",
<                                  "SetAltRegs",
<                                  "IntHandlerIret16",
<                                  "IntHandlerIret32",
<                                  "FaultHandlerIret16",
<                                  "FaultHandlerIret32",
<                                  "UnhandledExceptionHandler",
<                                  "RMCallBackCall",
<                                  "ReflectIntrToPM",
<                                  "ReflectIntrToV86",
<                                  "InitPmStackInfo",
---
>                                  "InitializePmStackInfo",
120,123c116,121
<                                  "SetDescriptorEntry",
<                                  "ResetLDTUserBase",
<                                  "XlatInt21Call",
<                                  "Int31"
---
>                                  "FreeAllXmem",
>                                  "IntHandlerIret",
>                                  "IntHandlerIretd",
>                                  "FaultHandlerIret",
>                                  "FaultHandlerIretd",
>                                  "DpmiUnhandledException"
--- NT4\private\mvdm\dpmi32\dpmi32.c
+++ nt\private\mvdm\dpmi32\dpmi32.c
92a93
>     static USHORT NestLevel = 0; 
101c102
<     DBGTRACE(DPMI_DISPATCH_ENTRY, Index, 0, 0);
---
>     DBGTRACE(VDMTR_TYPE_DPMI | DPMI_DISPATCH_ENTRY, NestLevel++, Index);
110a112,113
>     
>     DBGTRACE(VDMTR_TYPE_DPMI | DPMI_DISPATCH_EXIT, --NestLevel, Index); 
298a302
> VOID DpmiEnableIntHooks(VOID) { }
--- NT4\private\mvdm\dpmi32\precomp.h
+++ nt\private\mvdm\dpmi32\precomp.h
25a26
> #include <dbgsvc.h>
--- NT4\private\mvdm\dpmi32\fe\precomp.h
+++ nt\private\mvdm\dpmi32\fe\precomp.h
25a26
> #include <dbgsvc.h>
--- NT4\private\mvdm\dpmi32\daytona\precomp.h
+++ nt\private\mvdm\dpmi32\daytona\precomp.h
25a26
> #include <dbgsvc.h>
--- NT4\private\mvdm\dpmi32\x86\precomp.h
+++ nt\private\mvdm\dpmi32\x86\precomp.h
25a26
> #include <dbgsvc.h>
--- NT4\private\mvdm\inc\dpmi.h
+++ nt\private\mvdm\inc\dpmi.h
68,125d67
< /* XLATOFF */
< #if DBG
< 
< #define DBGTRACE(Type, v1, v2, v3) DpmiDbgTrace(Type, v1, v2, v3)
< 
< #else
< 
< #define DBGTRACE(Type, v1, v2, v3) {}
< 
< #endif
< 
< /* XLATON */
< 
< 
< VOID DpmiDbgTrace(
<     int Type,
<     ULONG v1,
<     ULONG v2,
<     ULONG v3
<     );
< 
< 
< #define DPMI_SET_PMODE_INT_HANDLER  1
< #define DPMI_SET_FAULT_HANDLER      2
< #define DPMI_DISPATCH_INT           3
< #define DPMI_HW_INT                 4
< #define DPMI_SW_INT                 5
< #define DPMI_INT_IRET16             6
< #define DPMI_INT_IRET32             7
< #define DPMI_FAULT                  8
< #define DPMI_DISPATCH_FAULT         9
< #define DPMI_FAULT_IRET             10
< #define DPMI_OP_EMULATION           11
< #define DPMI_DISPATCH_ENTRY         12
< 
< 
< typedef struct _DPMI_TRACE_ENTRY { /* DPMITRACE */
<     int Type;
<     ULONG v1;
<     ULONG v2;
<     ULONG v3;
<     ULONG eax;
<     ULONG ebx;
<     ULONG ecx;
<     ULONG edx;
<     ULONG esi;
<     ULONG edi;
<     ULONG ebp;
<     ULONG esp;
<     ULONG eip;
<     ULONG eflags;
<     USHORT cs;
<     USHORT ds;
<     USHORT es;
<     USHORT fs;
<     USHORT gs;
<     USHORT ss;
< } DPMI_TRACE_ENTRY;
