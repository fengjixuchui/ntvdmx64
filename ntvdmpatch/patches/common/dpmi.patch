--- NT4\private\mvdm\inc\dbgsvc.h
+++ nt\private\mvdm\inc\dbgsvc.h
50a51,52
> #define DBG_OUTCHAR     0x4100
> #define DBG_OUTSTR      0x4112
--- NT4\private\mvdm\dpmi32\data.c
+++ nt\private\mvdm\dpmi32\data.c
126c126
< #ifndef i386
---
> #if !defined(i386) || !defined(MONITOR)
140a141
> ULONG DosxHungAppExit;
--- NT4\private\mvdm\dpmi32\dpmi32.c
+++ nt\private\mvdm\dpmi32\dpmi32.c
69c69,70
<     DpmiUnhandledExceptionHandler               // 18
---
>     DpmiUnhandledExceptionHandler,              // 18
>     DpmiHungAppIretAndExit                      // 19
205c206
< 
---
>     DosxHungAppExit      = *(PDWORD16)(SharedData + 58);
247c248
< #if defined(i386)
---
> #if defined(i386) && defined(MONITOR)
--- NT4\private\mvdm\inc\dpmi.h
+++ nt\private\mvdm\inc\dpmi.h
56a57
> #define HungAppIretAndExit          25
58c59
< #define MAX_DPMI_BOP_FUNC DpmiUnhandledException + 1
---
> #define MAX_DPMI_BOP_FUNC HungAppIretAndExit + 1
--- NT4\private\mvdm\dpmi32\dpmi32p.h
+++ nt\private\mvdm\dpmi32\dpmi32p.h
29c29
< #ifdef i386
---
> #if defined(i386) && defined(MONITOR)
53c53
< #ifdef i386
---
> #if defined(i386) && defined(MONITOR)
109c109
< #ifndef i386
---
> #if !defined(i386) || !defined(MONITOR)
122a123
> extern ULONG DosxHungAppExit;
205c206
< BOOL
---
> NTSTATUS
250a252,255
> VOID DpmiHungAppIretAndExit(
>     VOID
>     );
> 
--- NT4\private\mvdm\dpmi32\dpmidata.h
+++ nt\private\mvdm\dpmi32\dpmidata.h
31c31
< #ifdef i386 
---
> #if defined(i386) && defined(MONITOR) 
57a58
> #ifndef i386
81a83
> #endif
112c114
<     UCHAR Misc[28];
---
>     UCHAR Misc[34];
--- NT4\private\mvdm\dpmi32\dpmiint.c
+++ nt\private\mvdm\dpmi32\dpmiint.c
88c88
< #ifdef i386
---
> #if defined(i386) && defined(MONITOR)
387c387
< #ifdef i386
---
> #if defined(i386) && defined(MONITOR)
689c689
< #ifdef i386
---
> #if defined(i386) && defined(MONITOR)
798c798
< #ifdef i386
---
> #if defined(i386) && defined(MONITOR)
859c859,881
< #ifndef i386
---
> VOID
> DpmiHungAppIretAndExit(
>     VOID
>     )
> /*++
> 
> Routine Description:
> 
>     This routine is called via BOP during hung app processing. The
>     Keyboard driver calls this in the context of a hw interrupt in
>     order to terminate the app. We need to "unwind" the current
>     interrupt, and transfer control to code which will execute
>     a DOS exit.
> 
> --*/
> 
> {
>     EndUseLockedPMStack();
>     setCS(HIWORD(DosxHungAppExit));
>     setIP(LOWORD(DosxHungAppExit));
> }
> 
> #if !defined(i386) || !defined(MONITOR)
1167c1189
< #ifndef i386
---
> #if !defined(i386) || !defined(MONITOR)
1201c1223
< #ifndef i386
---
> #if !defined(i386) || !defined(MONITOR)
1237c1259
< #ifndef i386
---
> #if !defined(i386) || !defined(MONITOR)
--- NT4\private\mvdm\dpmi32\dpmiint.h
+++ nt\private\mvdm\dpmi32\dpmiint.h
23c23
< #ifndef i386
---
> #if !defined(i386) || !defined(MONITOR)
--- NT4\private\mvdm\dpmi32\dpmiselr.c
+++ nt\private\mvdm\dpmi32\dpmiselr.c
40c40
< #ifndef i386
---
> #if !defined(i386) || !defined(MONITOR)
147c147
< #ifndef i386
---
> #if !defined(i386) || !defined(MONITOR)
164c164
< #ifdef i386
---
> #if defined(i386) && defined(MONITOR)
172c172
< #ifndef i386
---
> #if !defined(i386) || !defined(MONITOR)
185c185
< #ifndef i386
---
> #if !defined(i386) || !defined(MONITOR)
--- NT4\private\mvdm\dpmi32\modesw.c
+++ nt\private\mvdm\dpmi32\modesw.c
49c49
< #if defined(i386)
---
> #if defined(i386) && defined(MONITOR)
64,65d63
<     setCS(DosxRmCodeSegment);
< 
68c66,68
< #ifndef i386
---
>     setCS(DosxRmCodeSegment);
> 
> #if !defined(i386) || !defined(MONITOR)
72a73,75
>     //Set CPL to 0, now that we are in real mode, LGDT in 
>     // SwitchToProtectedMode would crash otherwise.
>     setCPL(0);
97c100
< #if defined(i386)
---
> #if defined(i386) && defined(MONITOR)
114c117
< #ifndef i386
---
> #if !defined(i386) || !defined(MONITOR)
--- NT4\private\mvdm\softpc.new\base\ccpu386\c_main.c
+++ nt\private\mvdm\softpc.new\base\ccpu386\c_main.c
4416a4417
> 	 if(!(GET_PE() && host_hwint_hook((IS32) cpu_hw_interrupt_number)))
--- NT4\private\mvdm\dpmi32\dpmimemr.c
+++ nt\private\mvdm\dpmi32\dpmimemr.c
136c136
< BOOL
---
> NTSTATUS
189c189
<     return NT_SUCCESS(Status);
---
>     return Status;
--- NT4\private\mvdm\dpmi32\stack.c
+++ nt\private\mvdm\dpmi32\stack.c
23a24,30
> #ifndef MONITOR
> extern BOOL setCS_BASE_LIMIT_AR	(ULONG base, ULONG limit, USHORT ar);
> extern BOOL setDS_BASE_LIMIT_AR	(ULONG base, ULONG limit, USHORT ar);
> extern BOOL setES_BASE_LIMIT_AR	(ULONG base, ULONG limit, USHORT ar);
> extern BOOL setIDT_BASE_LIMIT (ULONG base, USHORT limit);
> #endif
> 
125a133,142
> #ifndef MONITOR
>     // leecher1337: While  RM Int executes, we have to have IDT on Realmode IVT 
>     // and set proper segment limits
>     setCS_BASE_LIMIT_AR(0, 0xFFFF, 0x9b);
>     setDS_BASE_LIMIT_AR(0, 0xFFFF, 0x93);
>     setES_BASE_LIMIT_AR(0, 0xFFFF, 0x93);
>     setIDT_BASE_LIMIT(0, 0xFFFF);
> #endif
>     
> 
--- NT4\private\mvdm\dpmi32\savestat.c
+++ nt\private\mvdm\dpmi32\savestat.c
24a25,30
> #ifndef MONITOR
> extern DWORD  getIDT_BASE(VOID);
> extern USHORT getIDT_LIMIT(VOID);
> extern BOOL	  setIDT_BASE_LIMIT (ULONG base, USHORT limit);
> #endif
> 
35a42,45
> #ifndef MONITOR
>     ULONG IDTBase;
>     USHORT IDTLimit;
> #endif
80c90,93
< 
---
> #ifndef MONITOR // Not available on MONITOR :(
>     SavedState->IDTBase = getIDT_BASE();
>     SavedState->IDTLimit = getIDT_LIMIT();
> #endif
131a145,147
> #ifndef MONITOR // Not available on MONITOR :(
>     setIDT_BASE_LIMIT(SavedState->IDTBase, SavedState->IDTLimit);
> #endif
--- NT4\private\mvdm\dpmi\dxbug.asm
+++ nt\private\mvdm\dpmi\dxbug.asm
40a41,42
> include     intmac.inc
> include     dbgsvc.inc
493a496,501
> IFDEF WOW
>         push    ax
>         push    DBG_OUTCHAR
>         BOP     BOP_DEBUGGER
>         add     sp, 4
> ELSE
544a553
> ENDIF
--- NT4\private\mvdm\dpmi\486\dxstrt.asm
+++ nt\private\mvdm\dpmi\486\dxstrt.asm
118a119
>         extrn   HungAppExit:FAR
128a130,133
> if DEBUG
>         extrn   PMDebugInt:NEAR
>         extrn	fTraceBug:WORD
> endif
804a810,812
>         push    offset DXPMCODE:HungAppExit
> 
>         push    SEL_DXPMCODE OR STD_RING
1260a1269,1276
> 	; HACKHACK - Seems to fix DPMI applications running after termination,
> 	; but is this the correct way to do..??
> .386
> 	xor	ax, ax
> 	mov	fs, ax
> 	mov	gs, ax
> .286p
> 
--- NT4\private\mvdm\dpmi\486\dxintr.asm
+++ nt\private\mvdm\dpmi\486\dxintr.asm
313c313
< ; if DEBUG   ;------------------------------------------------------------
---
> if DEBUG   ;------------------------------------------------------------
317,318c317,319
< ;       extrn   fA20:BYTE
< ;       extrn   fTraceFault:WORD
---
>        extrn   fA20:BYTE
>        extrn   fTraceFault:WORD
> endif ;DEBUG  --------------------------------------------------------
327d327
< ; endif ;DEBUG  --------------------------------------------------------
491a492,496
>         public  HungAppExit
> HungAppExit:
>         mov     ax,4CFFh
>         int     21h
> 
565a571,574
> ifndef WOW_x86
>         and     ax,NOT 4300h    ;also clear interrupt flag to prevent
>                                 ; transfer stack overflow on reentrance
> else
568a578
> endif
611c621
<         jz      @f
---
>         jz      ndebug
614a625,629
>         cmp     fTraceReflect,3
>         jb      @f
>         mov     ax, pbReflStack
>         Trace_Out "st=#AX",x
> @@:
616c631
< @@:
---
> ndebug:
710c725,726
<         add     sp,4            ;'pop' off debugging info
---
>         pop     PMIntNo
>         add     sp,2            ;'pop' off debugging info
728a745,755
> if DEBUG
>         cmp     fTraceReflect,2
>         jb      @f
>         mov ax, PMIntNo
>         Trace_Out "[/pr#AL]",x
>         cmp     fTraceReflect,3
>         jb      @f
>         mov ax, pbReflStack
>         Trace_Out "st=#AX",x
> @@:
> endif
870a898,901
> ifndef WOW_x86
>         and     ax,NOT 4300h    ;also clear interrupt flag to prevent
>                                 ; transfer stack overflow on reentrance
> else
873a905
> endif
1059c1091,1099
<         add     sp,4            ;'pop' off debugging info
---
>         pop     PMIntNo
>         cmp     fTraceReflect,2
>         jb      @f
>         push    ax
>         mov     ax,PMIntNo
>         Trace_Out "(/rp#AL)",x
>         pop     ax
> @@:
>         add     sp, 2            ;'pop' off debugging info
3068a3109,3114
> if DEBUG
> ;        cmp     fTraceReflect,3
> ;        jb      @f
> ;        Trace_Out "W32 St=#BX ",x
> @@:
> endif
3084a3131,3133
> ifndef WOW_x86
>         and     ax, NOT 200h            ; clear interrupt flag 
> endif
3094a3144,3149
> if DEBUG
> ;        cmp     fTraceReflect,3
> ;        jb      @f
> ;        Trace_Out "Int=#DI"
> @@:
> endif
3160a3216,3229
> ifndef WOW_x86
> ; leecher1337: Make sure that the nested task flag is clear
> ; Interrupt hook code, i.e. DpmiSwIntHandler, DpmiHwintHandler ensure this,
> ; but if we don't do the hooking for performance reasons, like in HAXM, not
> ; doing this would lead to crash
>         and     ebx,NOT 4000h       
>         push    ebx
>         rpopfd
>         push    ax
>         mov     ax,[esp + 14]           ; get flags on entry
>         and     ax, 200h                ; was IF enabled?
>         or      bx, ax                  ; if so, set it in iret frame
>         pop     ax
> endif
3178a3248,3257
> ifndef WOW_x86	; leecher1337: Make sure that the nested task flag is clear
>         and     ebx,NOT 4000h
>         push    ebx
>         rpopfd
>         push    ax
>         mov     ax,[esp + 14]           ; get flags on entry
>         and     ax, 200h                ; was IF enabled?
>         or      bx, ax                  ; if so, set it in iret frame
>         pop     ax
> endif
--- NT4\private\mvdm\dpmi\486\dxmain.asm
+++ nt\private\mvdm\dpmi\486\dxmain.asm
2687c2687,2690
<         jmp     short gec80
---
> gec80:  ; With debug code, gec80 would be out of range, so trampoline here
>         jmp     short dbg_gec80
> gec90:
>         jmp     short dbg_gec90
2702,2703c2705,2710
< 
< gec80:  mov     bl,ah
---
> if DEBUG   ;------------------------------------------------------------
> dbg_gec80:
> else    ;DEBUG  --------------------------------------------------------
> gec80:
> endif   ;DEBUG  --------------------------------------------------------
>         mov     bl,ah
2707a2715,2717
> if DEBUG   ;------------------------------------------------------------
> dbg_gec90:
> else    ;DEBUG  --------------------------------------------------------
2708a2719
> endif   ;DEBUG  --------------------------------------------------------
--- NT4\private\mvdm\dpmi\dxmmgr.asm
+++ nt\private\mvdm\dpmi\dxmmgr.asm
101a102
> include intmac.inc
1153a1155,1159
> 			
>         ; leecher1337: SwitchToRealMode saves fs and gs, SwitchToProtectedMode restores them
>         ; If the selector to free is fs or gs, CPU would fault on restore, as it is already
>         ; zapped. Therefore, zero them out before switching to real mode 
>         call    ClearSegRegs
1194a1201,1228
> 
> ; -------------------------------------------------------
> ;   ClearSegRegs   -- This function will check if fs or 
> ;       gs selectors are equal to selector in ax 
> ;       If so, it will clear the respective selector 
> ;       This is needed for Protected mode switching 
> ;
> ;   Input:  AX      - selector to check 
> ;   Output: none
> ;   Uses:   AX, all other registers preserved
> ClearSegRegs    proc    near
> .386
>         push    bx
> 		mov     bx,fs
>         cmp     bx,ax
>         jne     flm61
>         xor     bx,bx
>         mov     fs,bx
> flm61:  mov     bx,gs
>         cmp     bx,ax
>         jne     flm62
>         xor     bx,bx
> 		mov     gs,bx
> flm62:  pop     bx
> .286p
>         ret
> ClearSegRegs    endp
> 
--- NT4\private\mvdm\dpmi\pmdefs.inc
+++ nt\private\mvdm\dpmi\pmdefs.inc
446a447,451
> 
> if DEBUG
> SEL_DYNALINK    = 0150h         ;first DynaLink call gate selector
> GDT_SIZE        = (((SEL_DYNALINK + (NUM_DYNALINK shl 3) + 8) shr 4) shl 4)
> else
450a456
> endif
